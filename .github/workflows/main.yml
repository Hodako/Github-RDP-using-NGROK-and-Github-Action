name: Run Windows RDP Server with Ngrok

on:
  workflow_dispatch:

jobs:
  setup-rdp:
    runs-on: windows-latest
    timeout-minutes: 720  # 12 hours timeout

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Download and Install Ngrok
      run: |
        Invoke-WebRequest -Uri "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip" -OutFile ngrok.zip
        Expand-Archive -Path ngrok.zip -DestinationPath .

    - name: Configure Ngrok
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      run: |
        .\ngrok authtoken $env:NGROK_AUTH_TOKEN

    - name: Start Ngrok and Get URL
      run: |
        # Start Ngrok in background
        Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp","3389" -WindowStyle Hidden
        
        # Wait for Ngrok to start and create the tunnel
        $maxRetries = 10
        $retryCount = 0
        $tunnelReady = $false
        
        Write-Host "Waiting for Ngrok to start..."
        
        do {
            Start-Sleep -Seconds 5
            try {
                $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction SilentlyContinue
                if ($response.tunnels.length -gt 0) {
                    $tunnelReady = $true
                    $url = $response.tunnels[0].public_url
                    Write-Host "Ngrok Tunnel URL: $url"
                    
                    # Generate and set random password
                    Add-Type -AssemblyName 'System.Web'
                    $password = [System.Web.Security.Membership]::GeneratePassword(16,3)
                    net user runneradmin $password
                    
                    Write-Host "RDP Credentials:"
                    Write-Host "Username: runneradmin"
                    Write-Host "Password: $password"
                    Write-Host "Public URL: $url"
                    break
                }
            } catch {
                $retryCount++
                Write-Host "Attempt $retryCount of $maxRetries - Waiting for Ngrok API..."
            }
        } while (-not $tunnelReady -and $retryCount -lt $maxRetries)
        
        if (-not $tunnelReady) {
            Write-Error "Failed to establish Ngrok tunnel after $maxRetries attempts"
            exit 1
        }

    - name: Keep Alive for 12 Hours
      run: |
        $timer = [Diagnostics.Stopwatch]::StartNew()
        while ($timer.Elapsed.TotalHours -lt 12) {
            $elapsedHours = $timer.Elapsed.TotalHours.ToString('0.0')
            $remainingHours = (12 - $timer.Elapsed.TotalHours).ToString('0.0')
            Write-Host "Session active - Elapsed: $elapsedHours hours - Remaining: $remainingHours hours"
            Start-Sleep -Seconds 300
        }
